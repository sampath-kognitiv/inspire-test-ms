plugins {
	id 'groovy'
	id 'org.springframework.boot' version '3.0.3'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco' //enable jacoco
}

group = 'com.kognitiv'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

configurations.testImplementation {
	all*.exclude module : 'logback-classic'
}
dependencies {


	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.apache.groovy:groovy'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"

	implementation 'org.projectlombok:lombok:1.18.20'


	implementation 'org.postgresql:postgresql:42.5.4'
	implementation 'org.flywaydb:flyway-core:9.15.1'
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.zonky.test:embedded-database-spring-test:2.2.0'
	testImplementation 'io.zonky.test:embedded-postgres:2.0.3'
	testImplementation "org.springframework.security:spring-security-test"
	testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-4.0'
	testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-4.0'
	//testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.2'

}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

tasks.named('test') {
	finalizedBy jacocoTestReport // report is always generated after tests run
	useJUnitPlatform()
	afterSuite { desc, result ->
		if (!desc.parent) { // will match the outermost suite
			def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			def startItem = '|  ', endItem = '  |'
			def repeatLength = startItem.length() + output.length() + endItem.length()
			println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
		}
	}
}
